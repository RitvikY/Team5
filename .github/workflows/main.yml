name: CI

# Controls when the workflow will run
on: [push, pull_request, workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Compile Java Classes
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
  
  ghostinrange:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Pacman is_ghost_in_range
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestGhostInRange
  
  pacmanvalidmoves:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Pacman Valid Moves
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestPacManValidMoves
  
  pacmanmove:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test PacMan move
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestPacManMove
  
  ghostvalidmoves:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Ghost Valid Moves
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestGhostValidMoves

  pacinrange:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Ghost is_pacman_in_range
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestPacManInRange
  
  ghostmove:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Ghost move
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestGhostMove
  
  mapattack:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Map attack
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestMapAttack
  
  mapmove:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Map Move
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestMapMove

  mapgetloc:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk:13
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Test Map getLoc
        run: |
          cd ./Projects/P2
          ./gradlew build testClasses -x test
          ./gradlew test --tests -Djava.awt.headless=true TestMapGetLoc
